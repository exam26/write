//////////////////////  1. git and github
git clone <url of the remote repository>
git init
git add <filename>
git commit -m "commit message"
git log --oneline|--summary
git reflog -> same as log but gives a reference of logs
git config --global user.name "Your name"
git config --global user.email "Your email"
git config --list
git remote add origin <url of the remote repository>
git push -u origin master
git pull origin master
git --set-upstream origin master

//////////////////// 2. array of integers as input. Use arrow functions to perform the following tasks:

arr=[1,3,5,6,7,8,10,12,14,15];
const res=(arr)=>{
    let double=arr.map(n=>n*2);
    let res1=double.filter(n=>(n>20));
    return res1;
}
console.log(res(arr))


//////////////////// 3. calculate the sum of all elements in an array using an arrow function

arr=[1,2,3,4,5];
const sum=(arr)=>arr.reduce((sum,n)=>sum+n)
console.log(sum(arr))

//////////////////// 4. filter even numbers from an array using an arrow function

arr=[1,2,3,4,5];
const even=(arr)=>arr.filter(n=>n%2==0)
console.log(even(arr))


//////////////////// 5. arrow function to check if a given string is a palindrome

str=prompt("Enter string");
const isPalindrome=(str)=> str=== str.split('').reverse().join('');
console.log(isPalindrome(str.toLowerCase()));

////////////////////  6.count the number of vowels in a string using an arrow function

str=prompt("Enter string");
const countVowels=(str)=>{
    let c=0;
    for (let char of str){
        if ('aeiou'.includes(char)){
            c++;
        }
    }
    return c;
}
console.log(countVowels(str.toLowerCase()));

//////////////////// 7. Destructuring

// 1. Object Destructuring
const person = {
    name: "John",
    age: 20,
    gender: "Male"
};
const { name, age, gender } = person;
console.log(name, age, gender); // John 20 Male

// 2. Array Destructuring
const array = [1, 2, 3];
const [one, two, three] = array;
console.log(one, two, three); // 1 2 3

// 3. Destructuring with Renaming
const { name: uName, age: uAge, gender: uGender } = person;
console.log(uName, uAge, uGender); // John 20 Male

// 4. Destructuring with Function
function operation(a, b) {
    return [a + b, a - b, a * b, a / b, a % b];
}
const [add, sub, mul, div, mod] = operation(10, 6);
console.log(add, sub, mul, div, mod); // 16 4 60 1.666... 4

// 5. Destructuring with Rest Operator
const arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9];
const [a, b, ...rest] = arr2;
console.log(a, b);       // 1 2
console.log(rest);       // [3, 4, 5, 6, 7, 8, 9]

//////////////////// 8. 2 JavaScript files. Import one file into another and access a function to say Hello to user.

// say.js
function sayHello(username) {
    return `Hello! ${username}`;
}
export { sayHello };

// app.js
import { sayHello } from './say.js';
console.log(sayHello("John"));

//index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Say Hello</title>
</head>
<body>
    <script type="module" src="app.js"></script>
</body>
</html>


////////////////////  9. find absolute value of a given number using async/await.

//number.js
let n = -142;
export { n };

//app.js

// import fs from "fs";
import {n as x} from "./number.js";
function findAbsolute(n){
    return new Promise((resolve,reject)=>{
        if(typeof n ==='number' && n>=0){
            resolve("Absolute value");
        }
    else{
        reject("Invalid")
    }
    });
}

async function findResult(n){
    try{
        const result=await findAbsolute(n);
        console.log(result);
    }
    catch(error){
        console.log(error);
    }
}

findResult(x);


//////////////////// 10. JavaScript console program to find sum of digits of a given number using async/await
// Function to return a promise that resolves with the sum of digits
function findDigitSum(n) {
    return new Promise((resolve, reject) => {
        if (!isNaN(n)) {
            let sum = 0;
            while (n > 0) {
                let rem = n % 10;
                sum += rem;
                n = Math.floor(n / 10);
            }
            resolve(sum);
        } else {
            reject("Invalid! Not a number");
        }
    });
}

// Async function to use await with the promise
async function findResult(n) {
    try {
        let result = await findDigitSum(n);
        console.log("Sum of digits:", result);
    } catch (error) {
        console.log(error);
    }
}

// Call the function with a sample number
findResult(245);


//////////////////// 11. NodeJS program to implement the following using fs module



//Deleting file

const fs=require("fs");
const os=require("os");
const path = require("path");
// fs.unlink("./file.txt",(err)=>{
//     if(err){const fs = require("fs");
// const path = require("path");

// Deleting file
const deleteFile = (filePath) => {
  fs.unlink(filePath, (err) => {
    if (err) {
      console.error(`Error deleting file: ${err.message}`);
    } else {
      console.log(`File deleted: ${filePath}`);
    }
  });
};

// Creating and Deleting directory
const createDirectory = (dirPath) => {
  fs.mkdir(dirPath, (err) => {
    if (err) {
      console.error(`Error creating directory: ${err.message}`);
    } else {
      console.log(`Directory created: ${dirPath}`);
    }
  });
};

const deleteDirectory = (dirPath) => {
  fs.rmdir(dirPath, (err) => {
    if (err) {
      console.error(`Error deleting directory: ${err.message}`);
    } else {
      console.log(`Directory deleted: ${dirPath}`);
    }
  });
};

// Deleting file within a directory
const deleteFileInDirectory = (filePath) => {
  const dirPath = path.dirname(filePath);
  fs.unlink(filePath, (err) => {
    if (err) {
      console.error(`Error deleting file: ${err.message}`);
    } else {
      console.log(`File deleted: ${filePath}`);
    //   deleteDirectory(dirPath);
    }
  });
};

// Removing the file and then removing the directory
const removeFileAndDirectory = (filePath) => {
  const dirPath = path.dirname(filePath);
  fs.unlink(filePath, (err) => {
    if (err) {
      console.error(`Error deleting file: ${err.message}`);
    } else {
      console.log(`File deleted: ${filePath}`);
      deleteDirectory(dirPath);
    }
  });
};

// Creating a directory and writing the data to the file within the directory
const createDirectoryAndWriteFile = (dirPath, filePath, data) => {
  fs.mkdir(dirPath, (err) => {
    if (err) {
      console.error(`Error creating directory: ${err.message}`);
    } else {
      console.log(`Directory created: ${dirPath}`);
      fs.writeFile(filePath, data, (err) => {
        if (err) {
          console.error(`Error writing file: ${err.message}`);
        } else {
          console.log(`File written: ${filePath}`);
        }
      });
    }
  });
};

// Create a server that listens to client requests using http module
const http = require("http");

const server = http.createServer((req, res) => {
  res.writeHead(200, { "Content-Type": "text/plain" });
  res.end("Hello World\n");
});

server.listen(3000, () => {
  console.log("Server running on port http://localhost:3000");
});

deleteFile("./file.txt");
createDirectory("./new-directory");
deleteDirectory("./new-directory");
deleteFileInDirectory("./new-directory1/file.txt");
removeFileAndDirectory("./new-directory1/file1.txt");
createDirectoryAndWriteFile("./new-directory", "./new-directory/file.txt", "Hello World");
   

//////////////////// 12. Write NodeJS program to implement os, and http module

const http = require("http");
const os=require("os");

const server = http.createServer((req, res) => {
  res.writeHead(200, { "Content-Type": "text/plain" });
  res.end("Hello World\n");
});

server.listen(3000, () => {
  console.log("Server running on port http://localhost:3000");
});


console.log("Arch:"+os.arch());
console.log("Home directory:"+os.homedir());
console.log("host name:"+os.hostname());
console.log("Cpus :"+os.cpus());
console.log("total memory:"+os.totalmem());
console.log("free memory:"+os.freemem());
console.log(os.platform());


////////////////////13. node js program to demonstrate events 
const events=require("events");
var myEmitter=new events.EventEmitter();
var SampleEvent=function(message){
    console.log(message);
}
myEmitter.on("SameEvent",SampleEvent);
myEmitter.emit("SameEvent","Event raised!");

////////////////////14. node js program to demonstrate read and write streams

const fs=require("fs");
const readStream=fs.createReadStream("./blog.txt","utf-8");
const writeStream=fs.createWriteStream("./blog1.txt");
readStream.on("data",(chunk)=>{
    console.log("------NEW CHUNK------");
    console.log(chunk);
    writeStream.write("\n NEW CHUNK\n"+chunk);
});

//////////////////// 15.node js program for reading and writing into file using pipes

const fs=require("fs")
const readStream=fs.createReadStream("./blog.txt","utf-8");
const writeStream=fs.createWriteStream("./blog1.txt");
readStream.pipe(writeStream);

////////////////////   16. node js program for reading the file and sending the contents as response to the client request.

const http=require("http");
const fs=require("fs");
const server=http.createServer((req,res)=>{
    res.writeHead(200,{"content-type":"plaintext"});
    const readStream=fs.createReadStream("./blog.txt","utf-8");
    readStream.pipe(res);
})

server.listen(4321,"127.0.0.1",()=>{
    console.log("server listening at port 4321");
});


////////////////////  17. node js program to serve the html page to the client

//htmlpage.js
const http = require('http');
const fs = require('fs');

var server = http.createServer((req, res) => {
    console.log('Request was made: ' + req.url);
    res.setHeader('Content-Type', 'text/html');
    res.statusCode = 200;

    fs.readFile('./index.html', (err, data) => {
        if (err) {
            console.log(err);
            res.end();
        } else {
            res.write(data);
            res.end();
        }
    });
});

server.listen(1234, "127.0.0.1", () => {
    console.log("Server listening at port 1234");
});

//index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Hey Hello !!</h1>
    <h2>This is FSD lab</h2>
</body>
</html>

//////////////////// 18. node js program to serve the json page to the client

const http = require('http');

var server = http.createServer((req, res) => {
    console.log("Request was made: " + req.url);

    res.setHeader("Content-Type", "application/json");
    res.statusCode = 200;

    var myobj = {
        Name: "Sakshi",
        RollNo: "22BIA05BC",
        Year: "III"
    };

    res.write(JSON.stringify(myobj));
    res.end();
});

server.listen(1243, () => {
    console.log("Server listening at port 1243");
});

//////////////////// 19.	Demonstrate Basic routing in node

const fs = require('fs');
const http = require('http');

const server = http.createServer((req, res) => {
    console.log(req.url);
    res.setHeader('Content-Type', 'text/html');
    let path = './views/'; // Directory containing HTML files
    
    switch (req.url) {
        case '/':
            path += 'index.html';
            res.statusCode = 200;
            break;
        case '/about':
            path += 'about.html';
            res.statusCode = 200;
            break;
        case '/about-me':
            res.statusCode = 301;
            res.setHeader('Location', '/about');
            res.end();
            return;
        default:
            path += 'error.html';
            res.statusCode = 404;
            break;
    }

    // Read the HTML file and serve it
    fs.readFile(path, (err, data) => {
        if (err) {
            console.log(err);
            res.statusCode = 500;  // Internal server error
            res.end('Error loading the page.');
        } else {
            res.write(data); // Send the file content
            res.end(); // End the response
        }
    });
});

server.listen(1243, 'localhost', () => {
    console.log('Server running at http://localhost:1243');
});

//////////////////// 20. Express server listening requests at port 3000. Add different end points to provide access to the resources

const express = require('express');
const app = express();

// Middleware to parse JSON bodies
app.use(express.json());

// Route for the homepage
app.get('/', (req, res) => {
    res.send('<h1>Welcome to the Home Page!</h1>');
});

// Route for the about page
app.get('/about', (req, res) => {
    res.send('<h1>Welcome to the About Page!</h1>');
});

// Default route for 404 errors
app.use((req, res) => {
    res.status(404).send('<h1>404 - Page Not Found</h1>');
});

// Start the server on port 3000
app.listen(3000, () => {
    console.log('Server running on http://localhost:3000');
});

//////////////////// 21. Create a REST API for employees data and add different end points on express server to   perform CRUD operations on the API. Test the end points using POSTMAN

const express = require('express');
const app = express();

// Middleware to parse JSON bodies
app.use(express.json());

// Dummy in-memory employee data (can later be replaced by a database)
let employees = [
    { id: 1, name: 'John Doe', position: 'Manager' },
    { id: 2, name: 'Jane Smith', position: 'Developer' }
];

// GET: Retrieve all employees
app.get('/', (req, res) => {
    res.status(200).json(employees);
});

// GET: Retrieve a specific employee by ID
app.get('/:id', (req, res) => {
    const employee = employees.find(e => e.id === parseInt(req.params.id));
    if (!employee) {
        return res.status(404).send('Employee not found');
    }
    res.status(200).json(employee);
});

// POST: Add a new employee
app.post('/', (req, res) => {
    const { name, position } = req.body;
    const newEmployee = {
        id: employees.length + 1,
        name,
        position
    };
    employees.push(newEmployee);
    res.status(201).json(newEmployee);
});

// PUT: Update an existing employee
app.put('/:id', (req, res) => {
    const employee = employees.find(e => e.id === parseInt(req.params.id));
    if (!employee) {
        return res.status(404).send('Employee not found');
    }

    const { name, position } = req.body;
    employee.name = name;
    employee.position = position;

    res.status(200).json(employee);
});

// DELETE: Remove an employee
app.delete('/:id', (req, res) => {
    const employeeIndex = employees.findIndex(e => e.id === parseInt(req.params.id));
    if (employeeIndex === -1) {
        return res.status(404).send('Employee not found');
    }

    const deletedEmployee = employees.splice(employeeIndex, 1);
    res.status(200).json(deletedEmployee);
});

// Start the server on port 3000
app.listen(3001, () => {
    console.log('Employee API running at http://localhost:3001');
});

//////////////////// 22. ejs program to display user information

//profile.ejs
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>You are viewing <%=userInfo.name%>'s page</h1>
    <h1>Age:<%=userInfo.age%></h1>
    <h1>User hobbies are :</h1>

    <%userInfo.hobbies.map(item=>{%>
       <h1><li><%=item%></li></h1>
    <%})%>

</body>
</html>


//app.js
const express=require("express");
const app=express();
app.set("view engine","ejs");

app.get("/",(req,res)=>{
    res.send("This is home page");
});

app.get("/profile",(req,res)=>{
    const userInfo={name:"sakshi",age:20,
        hobbies:["dancing","cooking"]
    }
    res.render("profile",{userInfo:userInfo} );
})
app.listen(3001,()=>{
    console.log("server listening at port 3001");
})

//////////////////// 23.ejs program to display contact information

//contact.ejs
<body>
    <table border="1px solid cyan" align="center">
        <tr>
            <th>id</th>
            <th>name</th>
            <th>contact</th>
        </tr>
        <% contactlist.forEach(contact => { %>
            <tr>
                <td><%= contact.id %></td>
                <td><%= contact.name %></td>
                <td><%= contact.phone %></td>
            </tr>
        <% }) %>
    </table>
</body>

//index.ejs
<table border="1px solid gray">
    <tr>
        <th>Name</th>
        <th>Contact</th>
    </tr>
    <tr>
        <td><%=contact.name%></td>
        <td><%=contact.phone%></td>
    </tr>
</table>



//app.js
const express = require("express");
const app = express();
app.set("view engine", "ejs");

const contactlist = [
    { id: 1, name: "abc", phone: 1234567891 },  // Change id to integer
    { id: 2, name: "def", phone: 1568523891 }
];

app.get("/", (req, res) => {
    res.send("This is using ejs...");
});

app.get("/contacts", (req, res) => {
    res.render("contact", { contactlist });
});

app.get("/contacts/:id", (req, res) => {
    // Make sure to compare integers by converting req.params.id to an integer
    const contact = contactlist.find(c => c.id === parseInt(req.params.id));
    if (contact) {
        res.render("index", { contact });
    } else {
        res.send(`There is no contact with the given id ${req.params.id}`);
    }
});

app.listen(1234, () => console.log("Server listening at port 1234."));


////////////////////  24.function generators

function * numberGenerator(){
    yield 1;
    yield 2;
    yield 3;
}
const generator=numberGenerator();
console.log(generator.next().value);
console.log(generator.next().value);
console.log(generator.next().value);
console.log(generator.next().value);

////////////////////  25.function generators with multiple generators

function * numberGenerator(){
    yield 1;
    yield 2;
    yield 3;
}
function * letterGenerator(){
    yield 'a';
    yield 'b';
    yield 'c';
}
function * combineGenerator(){
    yield * numberGenerator();
    yield * letterGenerator();
    yield "Done";
}

const generator=combineGenerator();
for (let value of generator){
    console.log(value);
}

//////////////////// 26.demonstrate symbols in java script

const id=Symbol("id");
let user={
    name:"Alice",
    age:25,
    [id]:123
}
console.log(user.name);
console.log(user.age);
console.log(user [id]);
 for (let key in user){
    console.log(key);
 }
 console.log(Object.keys(user));
 console.log(Object.getOwnPropertySymbols(user));


//////////////////// 27. 	write a program to demonstrate closures
function counter(){
    let count=0;
    return function(){
        count++;
        console.log(count);
    };
}
const increment = counter();
increment();
increment();
increment();

//////////////////// 28. prototypal inheritance

const arr=[2,4,6]
console.log(arr)
console.log(arr.__proto__)
console.log(Array.prototype)
console.log(arr.__proto__===Array.prototype)

console.log(arr.__proto__.__proto__)
console.log(Object.prototype)
console.log(arr.__proto__.__proto__===Object.prototype)

console.log(arr.__proto__.__proto__.__proto__)

const obj={name:"sakshi"};
console.log(obj.__proto__);
console.log(Object.prototype)
console.log(obj.__proto__.__proto__)

//function
function func(){
    console.log(func.__proto__)
    console.log(Function.__proto__)
    console.log(func.__proto__===Function.prototype)
    console.log(func.__proto__.__proto__)
    console.log(Object.prototype)
    console.log(func.__proto__.__proto__===Object.prototype)
    console.log(func.__proto__.__proto__.__proto__)
}

//constructor function
const person=function(lastName,birthYear){
    this.lastName=lastName
    this.birthYear=birthYear
    // function calAge(){
    //     console.log(2025-this.birthYear)                    WORONG WAY!!!!!
    // }
}

person.prototype.calAge=function(){
    console.log(2025-this.birthYear);
}
console.log(person.prototype)
const John=new person("John",1990);
console.log(John)
const Jack=new person("Jack",1995);
console.log(Jack)
John.calAge();
Jack.calAge();
console.log(John.__proto__===person.prototype) 


//////////////////// 29. fetch function to access remote data using the given API 
•	jsonplaceholder.typicode/users
•	Jsonplaceholder.typicode/todos
•	Restcountries.com


fetch("https://jsonplaceholder.typicode.com/todos/1")
.then((response) => response.json())
.then((data) => console.log(data))
.catch((err)=>console.log("Error",err))

async function fetchData() {
    const response=await fetch("https://jsonplaceholder.typicode.com/todos")
    const data=await response.json()
    console.log(`title:${data[0].title}`)
    data.map((ele)=>{
        console.log(`id:${ele.id} title:${ele.title} completed:${ele.compelted}`)
    });
}
fetchData()

async function fetchData1() {
    const response=await fetch("https://jsonplaceholder.typicode.com/users")
    const data=await response.json()
    console.log(data[0].username)
    console.log(`username:${data[0].username} email:${data[0].email} `)

    console.log("Information of all users")
    data.map((ele)=>{
        console.log(`username:${ele.username}\n email:${ele.email}\n phone:${ele.phone} `)
    });
}
fetchData1()

async function fetchData2() {
    const response=await fetch("https://restcountries.com/v3.1/name/India")
    const data=await response.json()
    console.log(`capital:${data[0].capital}`)
    
}
fetchData2()


//////////////////// 30. read the weather data from api “openweathermap.org” and display the  details like min_temp,max_temp,avg_temp for a given city 



async function fetchData3(){
    try{
        const API_KEY="1996f7f5622bdc81d6b052d92742934c"
        const CITY="Hyderabad"
        const URL=`//api.openweathermap.org/data/2.5/weather?q=${CITY}&appid=${API_KEY}`
        const response=await fetch(URL)
        const data=await response.json()
        const data1=data.main
        console.log(`temperature:${data1.temp} humidity:${data1.humidity} `)
        console.log(data)
        console.log(`Min temperature: ${data1.temp_min} \nMax temperature: ${data1.temp_max}\nAverage temp:${data1.temp} `)
    }catch(err){
        console.log("Unable to fetch data",err)
    }
}
fetchData3()




////////////////////  31. display details like date and temp in a table

//index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Forecast</title>
    <style>
        table {
            width: 50%;
            border-collapse: collapse;
            margin: 20px 0;
            font-size: 18px;
            text-align: left;
        }
        th, td {
            padding: 10px;
            border: 1px solid #ddd;
        }
        th {
            background-color: #4CAF50;
            color: white;
        }
    </style>
</head>
<body>
    <h2>Weather Forecast for Hyderabad</h2>
    <table id="weatherTable">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temperature (°C)</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
    <script src="file.js"></script>
</body>
</html>

file.js
async function fetchForecast() {
    const API_KEY = "f3051302b198b4eaea37dd4b9e21ff67"; // Replace with your API key
    const city = "Hyderabad";
    const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`;

    try {
        const response = await fetch(url);
        const data = await response.json();

        if (!data.list) {
            console.error("Invalid API response:", data);
            return;
        }

        const tableBody = document.querySelector("#weatherTable tbody");
        tableBody.innerHTML = data.list
            .filter((_, index) => index % 8 === 0) // Pick one entry per day
            .map(entry => {
                const date = new Date(entry.dt * 1000).toLocaleDateString();
                const temp = entry.main.temp.toFixed(1);
                return `<tr><td>${date}</td><td>${temp}°C</td></tr>`;
            })
            .join(""); // Convert array to a single HTML string

    } catch (error) {
        console.error("Error fetching weather data:", error);
    }
}

fetchForecast();


//////////////////// 32. Mongodb queries
college> db.ptoducts.insertMany([ {"_id" : 1,"Name" : "Computer","Price" : 500 , "Quality" : 50} , {"_id" : 2 ,"Name" : "Laptop","Price" : 600 , "Quality" : 50} ] );

college> db.products.insertMany([{"_id" : 3 , "Name":"KeyBoard" , "Price" : 50 ,"Quality" : 30} ,{"_id": 4,"Name" : "Mouse","Price" : 20 ,"Quality" : 70},{"_id":5 , "Name" : "Monitor" ,"Price":200,"Quality":60},{"_id" : 6 , "Name":"CPU" , "Price" : 300 ,"Quality" : 20} ,{"_id" : 7 , "Name":"RAM" , "Price" : 100 ,"Quality" : 40} ,{"_id" : 8 , "Name":"HDD" , "Price" : 400 ,"Quality" : 80}]);

1. Find the products information whose price is greater than or equal to 200.

college> db.products.find({"Price":{$gte : 200}});

2. Find the products information whose price is less than 200.
college> db.products.find({"Price" :{$lt:200}});

3. Find the products information whose quantity is not equal to 300.
college> db.products.find({"Quality" :{$ne:300}});


4. Find the products information whose price is equal to 200 and quantity is equal to 60.
college> db.products.find({$and:[{"Price":{$eq:200}},{"Quality":{$eq:60}}]});

5. Find the products information whose price is equal to 500 or quantity is equal to 60.
college> db.products.find({$or:[{"Price":{$eq:500}},{"Quality":{$eq:60}}]});

6. Find the products information whose price is not equal to 400 or quantity is not equal to 40.
college> db.products.find({$nor:[{"Price":{$eq:400}},{"Quality":{$eq:40}}]});

7. Find the products information whose price is either 200 or 400.
college> db.products.find({"Price" :{$in:[200,400]}});

8. Find the products information whose price is neither 100 nor 500.
college> db.products.find({"Price" :{$nin:[100,500]}});

9. Update the price of laptop to 700.
college> db.products.updateOne({Name :"Laptop"},{$set:{Price:600}});

college> db.products.find({Name:"Laptop"});
[ { _id: 2, Name: 'Laptop', Price: 600, Quality: 50 } ]

10. Find the name, and price of the products whose _id is 5.
college> db.products.find({_id : 5},{Name:1,Price:1});

11. Sort the products collection based on the ascending order of name.
college> db.products.find().sort({Name:1});

12. Sort the products collection based on the descending order of price and limit the result to 2 documents.
college> db.products.find().sort({Price:-1}).limit(2);

13. Retrieve the name, and price of the product with the lowest price
college> db.products.find().sort({ Price: 1 }).limit(1).projection({ Name: 1, Price: 1})

14. Retrieve the third lowest-priced product, displaying only its name and price
college> db.products.find().sort({ Price: 1 }).skip(2).limit(1).projection({ Name: 1, Price: 1})

15. Delete the product whose _id is 7.
college> db.products.deleteOne({_id:7});
{ acknowledged: true, deletedCount: 1 }
college> db.products.find();

////////////////////33. express application connecting mongodb and perform CRUD operations

const express=require("express");
const mongoose=require("mongoose");

const app=express();
const PORT=3000;

app.use(express.json());
const MONGO_URL="mongodb://localhost:27017/mynewdb";

mongoose.connect(MONGO_URL).then(()=>console.log("connected to mongodb"))
.catch(err=>console.log("Error in connecting to mongodb",err))

const productSchema=new mongoose.Schema({
    _id:Number,
    name:String,
    price:Number,
    quantity:Number,
})
const Product=mongoose.model("Product",productSchema);

// app.post("/products",async(req,res)=>{
//     try{
//         const product=new Product(req.body);
//         await product.save();
//         res.status(200).json(product);
//     }
//     catch{
//         res.status(400).json({error:err.message})
//     }
// });

// app.get("/products",async(req,res)=>{
//     try{
//         const products=await Product.find();
//         res.json(products);
//     }
//     catch(err){
//         res.status(400).json({error:err.message})
//     }
// });

// app.get("/products/:id", async (req, res) => {
//     try {
//         const product = await Product.findById(req.params.id);
//         if (!product) {
//             return res.status(404).json({ error: "Product not found" });
//         }
//         res.json(product);
//     } catch (err) {
//         res.status(400).json({ error: err.message });
//     }
// });

// app.put("/products/:id", async (req, res) =>{
//     try{
//         const product=await Product.findByIdAndUpdate(req.params.id,
//             {
//                 name:req.body.name,
//                 price:req.body.price,
//                 quantity:req.body.quantity
//             },{new:true}
//         );
//         if (!product) {
//             return res.status(404).json({ error: "Product not found" });
//         }
//         res.json(product);
//     }
//     catch (err) {
//         res.status(400).json({ error: err.message });
//     }
// })


app.delete("/products/:id", async (req, res) =>{
    try{
        const product=await Product.findByIdAndDelete(req.params.id);
        if (!product) {
        return res.status(404).json({ error: "Product not found" });
        }
        res.json({message:"Product deleted"});
    }catch (err) {
        res.status(400).json({ error: err.message });
    }        
})


app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});



////////////////////34.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Data</title>
</head>
<body>
    <h2>Student Information Form</h2>
    
        <label for="name">Name:</label><br>
        <input type="text" id="name" name="name" required><br><br>
        
        <label for="rollno">Roll Number:</label><br>
        <input type="text" id="rollno" name="rollno" required><br><br>

        <label for="branch">Branch:</label><br>
        <input type="text" id="branch" name="branch" required><br><br>

        <label for="section">Section:</label><br>
        <input type="text" id="section" name="section" required><br><br>

       <button type="button" id="insert">Insert</button>
       <button type="button" id="select">Select</button>
       <button type="button" id="update">Update</button>
       <button type="button" id="delete">Delete</button>
    
    <script type="module">
        // Import the functions you need from the SDKs you need
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.4.0/firebase-app.js";
        import { getAnalytics } from "https://www.gstatic.com/firebasejs/11.4.0/firebase-analytics.js";

        // Your web app's Firebase configuration
        // For Firebase JS SDK v7.20.0 and later, measurementId is optional
        const firebaseConfig = {
          apiKey: "AIzaSyDtCbQmZTrN8Lqt46JSvGkyWVM_fTogNNo",
          authDomain: "my-firebase-app-cdde0.firebaseapp.com",
          projectId: "my-firebase-app-cdde0",
          storageBucket: "my-firebase-app-cdde0.firebasestorage.app",
          messagingSenderId: "767600941449",
          appId: "1:767600941449:web:2626dff210c93fe6faa958",
          measurementId: "G-WZJBF4QZNF"
        };
      
        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const analytics = getAnalytics(app);

        import{
            set,
            ref,
            getDatabase,
            get,
            child,
            update,
            remove
        }from "https://www.gstatic.com/firebasejs/11.4.0/firebase-database.js";

        const db=getDatabase();

        var nameBox=document.getElementById("name");
        var rollBox=document.getElementById("rollno");
        var branchBox=document.getElementById("branch");
        var secBox=document.getElementById("section");

        var selBtn=document.getElementById("select");
        var insBtn=document.getElementById("insert");
        var updBtn=document.getElementById("update");
        var delBtn=document.getElementById("delete");
        var clrBtn=document.getElementById("clear");

        //insert
        function InsertData(){
            set(ref(db,"TheStudents/"+rollBox.value),{
                NameOfStd:nameBox.value,
                RollNo:rollBox.value,
                Branch:branchBox.value,
                Section:secBox.value
            })
            .then(()=>alert("Data inserted successfully"))
            .catch((err)=>alert("unsuccessful,error"+err));
        }
        insBtn.addEventListener("click",InsertData);

        const dbRef=ref(db);
        function SelectData(){
            get(child(dbRef,"TheStudents/"+rollBox.value))
            .then((snapshot)=>{
                if(snapshot.exists()){
                    nameBox.value=snapshot.val().NameOfStd;
                    branchBox.value=snapshot.val().Branch;
                    secBox.value=snapshot.val().Section;
                }
                else{
                    alert("No data found");
                }
            })
            .catch((err)=>alert("Unsuccessful,,error"+err));
        }
        selBtn.addEventListener("click",SelectData);

        function UpdateData(){
            update(ref(db,"TheStudents/"+rollBox.value),{
                NameOfStd:nameBox.value,
                RollNo:rollBox.value,
                Branch:branchBox.value,
                Section:secBox.value
            })
            .then(()=>alert("Data updated successfully"))
            .catch((err)=>alert("unsuccessful,error"+err));
        }
        updBtn.addEventListener("click",UpdateData);

        function DeleteData(){
            remove(ref(db,"TheStudents/"+rollBox.value))
            .then(()=>alert("Data deleted successfully"))
            .catch((err)=>alert("unsuccessful,error"+err));
        }
       delBtn.addEventListener("click",DeleteData);

      </script>


</body>
</html>

////////////////////35. 

const{ initializeApp }= require("firebase/app");
const {
    getFirestore,   
    collection,
    addDoc,
    getDocs,
    doc,
    updateDoc,
    deleteDoc,
} = require("firebase/firestore");

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyB1Rv6pVdSGnSqMCBiQCdWecy_Pj0GKZd4",
  authDomain: "my-app-2351b.firebaseapp.com",
  projectId: "my-app-2351b",
  storageBucket: "my-app-2351b.firebasestorage.app",
  messagingSenderId: "374277435480",
  appId: "1:374277435480:web:18e651b29091ed733c9a2d"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

// Initialize Cloud Firestore and get a reference to the service
const db = getFirestore(app);
async function addUser() {
    try {
        const docRef = await addDoc(collection(db, "users"), {
        name: "Raju",
        age: 20,
        city: "Dubai",
    });
    console.log("Document written with ID: ", docRef.id);
    } catch (e) {
        console.error("Error adding document: ", e);
    }
}

async function getUsers() {
    const querySnapshot = await getDocs(collection(db, "users"));
    querySnapshot.forEach((doc) => {
    console.log(`${doc.id} =>`, doc.data());
    });
}

async function updateUser(docId) {
    const userRef = doc(db, "users", docId);
    await updateDoc(userRef, {
    age: 30,
    city: "Chennai",
    });
    console.log("User updated!");
}

async function deleteUser(docId) {
    await deleteDoc(doc(db, "users", docId));
    console.log("User deleted!");
}
//addUser();
//getUsers();
//updateUser("WnXrKaqrg9K8WsEOxZY9");
//deleteUser("FhzDlWH1WR8b94UiBuEi")